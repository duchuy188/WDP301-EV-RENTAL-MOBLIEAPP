import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  Modal,
  ScrollView,
  TextInput,
  useColorScheme,
  KeyboardAvoidingView,
  Platform,
  Dimensions
} from 'react-native';
import { MessageCircle, Send, X, Bot, User } from 'lucide-react-native';
import Animated, { 
  useSharedValue, 
  useAnimatedStyle, 
  withSpring, 
  withSequence,
  FadeIn,
  FadeInDown 
} from 'react-native-reanimated';
import { useThemeStore } from '@/store/themeStore';
import { useVehicleStore } from '@/store/vehicleStore';

const { height } = Dimensions.get('window');
const AnimatedTouchableOpacity = Animated.createAnimatedComponent(TouchableOpacity);

interface Message {
  id: string;
  text: string;
  isUser: boolean;
  timestamp: Date;
}

export default function ChatbotFAB() {
  const colorScheme = useColorScheme();
  const { colors } = useThemeStore();
  const { vehicles, rentalHistory } = useVehicleStore();
  
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: 'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI c·ªßa EV Renter. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m xe, ki·ªÉm tra l·ªãch s·ª≠ thu√™ xe v√† tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ d·ªãch v·ª•. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨?',
      isUser: false,
      timestamp: new Date(),
    }
  ]);
  const [inputText, setInputText] = useState('');

  const scale = useSharedValue(1);

  const animatedStyle = useAnimatedStyle(() => {
    return {
      transform: [{ scale: scale.value }],
    };
  });

  const handlePress = () => {
    scale.value = withSequence(
      withSpring(0.9, { duration: 100 }),
      withSpring(1, { duration: 100 })
    );
    setIsOpen(true);
  };

  const getAIResponse = (userMessage: string): string => {
    const lowerMessage = userMessage.toLowerCase();

    // Vehicle availability queries
    if (lowerMessage.includes('xe') && (lowerMessage.includes('c√≤n') || lowerMessage.includes('s·∫µn') || lowerMessage.includes('c√≥'))) {
      const availableVehicles = vehicles.filter(v => v.isAvailable);
      return `Hi·ªán t·∫°i c√≥ ${availableVehicles.length} xe c√≥ s·∫µn:\n\n${availableVehicles.map(v => 
        `üöó ${v.name} - Pin: ${v.batteryLevel}%\nüìç ${v.location.address.split(',')[0]}\nüí∞ ${v.pricePerHour.toLocaleString()}ƒë/gi·ªù`
      ).join('\n\n')}`;
    }

    // Battery level queries
    if (lowerMessage.includes('pin') && (lowerMessage.includes('nhi·ªÅu') || lowerMessage.includes('cao') || lowerMessage.includes('ƒë·∫ßy'))) {
      const highBatteryVehicles = vehicles
        .filter(v => v.isAvailable && v.batteryLevel >= 80)
        .sort((a, b) => b.batteryLevel - a.batteryLevel);
      
      if (highBatteryVehicles.length === 0) {
        return 'Hi·ªán t·∫°i kh√¥ng c√≥ xe n√†o v·ªõi m·ª©c pin tr√™n 80%. Xe c√≥ pin cao nh·∫•t hi·ªán t·∫°i l√† ' + 
               vehicles.sort((a, b) => b.batteryLevel - a.batteryLevel)[0]?.name + 
               ` v·ªõi ${vehicles.sort((a, b) => b.batteryLevel - a.batteryLevel)[0]?.batteryLevel}% pin.`;
      }
      
      return `Xe c√≥ pin cao nh·∫•t:\n\n${highBatteryVehicles.slice(0, 3).map(v => 
        `üîã ${v.name} - ${v.batteryLevel}%\nüìç ${v.location.address.split(',')[0]}`
      ).join('\n\n')}`;
    }

    // Location-based queries
    if (lowerMessage.includes('g·∫ßn') || lowerMessage.includes('ƒë·ªãa ƒëi·ªÉm') || lowerMessage.includes('ƒë√¢u')) {
      const locations = [...new Set(vehicles.map(v => v.location.address.split(',')[0]))];
      return `C√°c ƒëi·ªÉm c√≥ xe hi·ªán t·∫°i:\n\n${locations.map((loc, i) => 
        `üìç ${loc}\nüöó ${vehicles.filter(v => v.location.address.includes(loc)).length} xe c√≥ s·∫µn`
      ).join('\n\n')}`;
    }

    // Price queries
    if (lowerMessage.includes('gi√°') || lowerMessage.includes('r·∫ª') || lowerMessage.includes('ti·ªÅn')) {
      const cheapestVehicles = vehicles
        .filter(v => v.isAvailable)
        .sort((a, b) => a.pricePerHour - b.pricePerHour);
      
      return `Xe gi√° t·ªët nh·∫•t:\n\n${cheapestVehicles.slice(0, 3).map(v => 
        `üí∞ ${v.name} - ${v.pricePerHour.toLocaleString()}ƒë/gi·ªù\nüìç ${v.location.address.split(',')[0]}\nüîã Pin: ${v.batteryLevel}%`
      ).join('\n\n')}`;
    }

    // Rental history queries
    if (lowerMessage.includes('l·ªãch s·ª≠') || lowerMessage.includes('thu√™ tr∆∞·ªõc') || lowerMessage.includes('ƒë√£ thu√™')) {
      if (rentalHistory.length === 0) {
        return 'B·∫°n ch∆∞a c√≥ l·ªãch s·ª≠ thu√™ xe n√†o. H√£y ƒë·∫∑t xe ƒë·∫ßu ti√™n c·ªßa b·∫°n!';
      }
      
      const recentRentals = rentalHistory.slice(0, 3);
      return `L·ªãch s·ª≠ thu√™ xe g·∫ßn ƒë√¢y:\n\n${recentRentals.map(r => 
        `üöó ${r.vehicle.name}\nüìÖ ${new Date(r.startDate).toLocaleDateString('vi-VN')}\nüí∞ ${r.totalCost.toLocaleString()}ƒë\nüõ£Ô∏è ${r.distance}km`
      ).join('\n\n')}`;
    }

    // Booking help
    if (lowerMessage.includes('ƒë·∫∑t') || lowerMessage.includes('thu√™') || lowerMessage.includes('book')) {
      return `ƒê·ªÉ ƒë·∫∑t xe, b·∫°n c√≥ th·ªÉ:\n\n1Ô∏è‚É£ V√†o tab "ƒê·∫∑t xe" tr√™n trang ch·ªß\n2Ô∏è‚É£ Ch·ªçn xe ph√π h·ª£p v·ªõi nhu c·∫ßu\n3Ô∏è‚É£ Ch·ªçn th·ªùi gian v√† ƒë·ªãa ƒëi·ªÉm\n4Ô∏è‚É£ X√°c nh·∫≠n ƒë·∫∑t xe\n\nüí° M·∫πo: ƒê·∫∑t xe tr∆∞·ªõc 30 ph√∫t ƒë·ªÉ c√≥ gi√° t·ªët nh·∫•t!`;
    }

    // App features
    if (lowerMessage.includes('t√≠nh nƒÉng') || lowerMessage.includes('l√†m g√¨') || lowerMessage.includes('ch·ª©c nƒÉng')) {
      return `EV Renter c√≥ c√°c t√≠nh nƒÉng ch√≠nh:\n\nüöó ƒê·∫∑t xe ƒëi·ªán d·ªÖ d√†ng\nüì± Qu√©t QR ƒë·ªÉ nh·∫≠n xe\nüìù H·ª£p ƒë·ªìng ƒëi·ªán t·ª≠\nüìä Theo d√µi l·ªãch s·ª≠ v√† ph√¢n t√≠ch\nüí¨ Tr·ª£ l√Ω AI (t√¥i ƒë√¢y!)\nüåô Ch·∫ø ƒë·ªô s√°ng/t·ªëi\n\nB·∫°n mu·ªën bi·∫øt th√™m v·ªÅ t√≠nh nƒÉng n√†o?`;
    }

    // Default responses
    const defaultResponses = [
      'T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m xe c√≥ s·∫µn, ki·ªÉm tra l·ªãch s·ª≠ thu√™ xe, ho·∫∑c h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng ·ª©ng d·ª•ng. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ c·ª• th·ªÉ?',
      'B·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ:\n‚Ä¢ Xe c√≥ s·∫µn g·∫ßn b·∫°n\n‚Ä¢ Xe c√≥ pin cao\n‚Ä¢ Gi√° thu√™ xe\n‚Ä¢ L·ªãch s·ª≠ thu√™ xe\n‚Ä¢ C√°ch ƒë·∫∑t xe\n\nB·∫°n mu·ªën bi·∫øt g√¨?',
      'Xin l·ªói, t√¥i ch∆∞a hi·ªÉu c√¢u h·ªèi c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ xe c√≥ s·∫µn, gi√° c·∫£, l·ªãch s·ª≠ thu√™ xe, ho·∫∑c c√°ch s·ª≠ d·ª•ng ·ª©ng d·ª•ng.',
    ];

    return defaultResponses[Math.floor(Math.random() * defaultResponses.length)];
  };

  const sendMessage = () => {
    if (!inputText.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputText.trim(),
      isUser: true,
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, userMessage]);
    setInputText('');

    // Simulate AI response delay
    setTimeout(() => {
      const aiResponse: Message = {
        id: (Date.now() + 1).toString(),
        text: getAIResponse(inputText.trim()),
        isUser: false,
        timestamp: new Date(),
      };
      setMessages(prev => [...prev, aiResponse]);
    }, 1000);
  };

  const quickActions = [
    { text: 'Xe n√†o c√≥ pin nhi·ªÅu?', action: () => setInputText('Xe n√†o c√≥ pin nhi·ªÅu?') },
    { text: 'ƒêi·ªÉm thu√™ g·∫ßn nh·∫•t?', action: () => setInputText('ƒêi·ªÉm thu√™ g·∫ßn nh·∫•t?') },
    { text: 'L·ªãch s·ª≠ c·ªßa t√¥i', action: () => setInputText('L·ªãch s·ª≠ thu√™ xe c·ªßa t√¥i') },
    { text: 'Xe gi√° r·∫ª nh·∫•t?', action: () => setInputText('Xe n√†o gi√° r·∫ª nh·∫•t?') },
  ];

  const styles = StyleSheet.create({
    fab: {
      position: 'absolute',
      bottom: 90,
      right: 20,
      width: 56,
      height: 56,
      backgroundColor: colors.primary,
      borderRadius: 28,
      justifyContent: 'center',
      alignItems: 'center',
      shadowColor: colors.text,
      shadowOffset: { width: 0, height: 4 },
      shadowOpacity: 0.3,
      shadowRadius: 8,
      elevation: 8,
      zIndex: 1000,
    },
    modalContainer: {
      flex: 1,
      backgroundColor: 'rgba(0,0,0,0.5)',
    },
    chatContainer: {
      flex: 1,
      backgroundColor: colors.surface,
      marginTop: height * 0.1,
      borderTopLeftRadius: 20,
      borderTopRightRadius: 20,
    },
    chatHeader: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'space-between',
      paddingHorizontal: 20,
      paddingVertical: 16,
      borderBottomWidth: 1,
      borderBottomColor: colors.border,
    },
    headerTitle: {
      fontSize: 18,
      fontWeight: 'bold',
      color: colors.text,
      fontFamily: 'Inter-Bold',
    },
    headerSubtitle: {
      fontSize: 14,
      color: colors.primary,
      fontFamily: 'Inter-Regular',
    },
    closeButton: {
      width: 32,
      height: 32,
      borderRadius: 16,
      backgroundColor: colors.border,
      justifyContent: 'center',
      alignItems: 'center',
    },
    messagesContainer: {
      flex: 1,
      paddingHorizontal: 16,
      paddingTop: 16,
    },
    messageWrapper: {
      marginBottom: 16,
      flexDirection: 'row',
      alignItems: 'flex-end',
    },
    userMessage: {
      justifyContent: 'flex-end',
    },
    botMessage: {
      justifyContent: 'flex-start',
    },
    avatar: {
      width: 32,
      height: 32,
      borderRadius: 16,
      justifyContent: 'center',
      alignItems: 'center',
      marginHorizontal: 8,
    },
    userAvatar: {
      backgroundColor: colors.primary,
    },
    botAvatar: {
      backgroundColor: colors.secondary,
    },
    messageBubble: {
      maxWidth: '75%',
      paddingHorizontal: 16,
      paddingVertical: 12,
      borderRadius: 16,
    },
    userBubble: {
      backgroundColor: colors.primary,
    },
    botBubble: {
      backgroundColor: colors.background,
      borderWidth: 1,
      borderColor: colors.border,
    },
    messageText: {
      fontSize: 16,
      lineHeight: 22,
      fontFamily: 'Inter-Regular',
    },
    userText: {
      color: '#FFFFFF',
    },
    botText: {
      color: colors.text,
    },
    timestamp: {
      fontSize: 12,
      color: colors.textSecondary,
      marginTop: 4,
      fontFamily: 'Inter-Regular',
    },
    quickActions: {
      paddingHorizontal: 16,
      paddingVertical: 12,
    },
    quickActionsTitle: {
      fontSize: 14,
      color: colors.textSecondary,
      marginBottom: 8,
      fontFamily: 'Inter-Medium',
    },
    quickActionsRow: {
      flexDirection: 'row',
      flexWrap: 'wrap',
      gap: 8,
    },
    quickAction: {
      backgroundColor: colors.border,
      paddingHorizontal: 12,
      paddingVertical: 6,
      borderRadius: 16,
    },
    quickActionText: {
      fontSize: 14,
      color: colors.text,
      fontFamily: 'Inter-Regular',
    },
    inputContainer: {
      flexDirection: 'row',
      alignItems: 'center',
      paddingHorizontal: 16,
      paddingVertical: 12,
      borderTopWidth: 1,
      borderTopColor: colors.border,
      backgroundColor: colors.surface,
    },
    textInput: {
      flex: 1,
      borderWidth: 1,
      borderColor: colors.border,
      borderRadius: 20,
      paddingHorizontal: 16,
      paddingVertical: 10,
      fontSize: 16,
      color: colors.text,
      maxHeight: 100,
      fontFamily: 'Inter-Regular',
    },
    sendButton: {
      marginLeft: 12,
      width: 40,
      height: 40,
      borderRadius: 20,
      backgroundColor: colors.primary,
      justifyContent: 'center',
      alignItems: 'center',
    },
    sendButtonDisabled: {
      backgroundColor: colors.border,
    },
  });

  return (
    <>
      <AnimatedTouchableOpacity
        style={[styles.fab, animatedStyle]}
        onPress={handlePress}
      >
        <MessageCircle size={24} color="#FFFFFF" />
      </AnimatedTouchableOpacity>

      <Modal
        visible={isOpen}
        animationType="fade"
        transparent
        statusBarTranslucent
      >
        <KeyboardAvoidingView
          style={styles.modalContainer}
          behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        >
          <View style={styles.chatContainer}>
            <Animated.View entering={FadeIn.delay(100)} style={styles.chatHeader}>
              <View>
                <Text style={styles.headerTitle}>Tr·ª£ l√Ω AI</Text>
                <Text style={styles.headerSubtitle}>üü¢ ƒêang ho·∫°t ƒë·ªông</Text>
              </View>
              <TouchableOpacity 
                style={styles.closeButton}
                onPress={() => setIsOpen(false)}
              >
                <X size={18} color={colors.textSecondary} />
              </TouchableOpacity>
            </Animated.View>

            <ScrollView 
              style={styles.messagesContainer}
              showsVerticalScrollIndicator={false}
            >
              {messages.map((message, index) => (
                <Animated.View
                  key={message.id}
                  entering={FadeInDown.delay(index * 50)}
                  style={[
                    styles.messageWrapper,
                    message.isUser ? styles.userMessage : styles.botMessage,
                  ]}
                >
                  {!message.isUser && (
                    <View style={[styles.avatar, styles.botAvatar]}>
                      <Bot size={16} color="#FFFFFF" />
                    </View>
                  )}
                  
                  <View>
                    <View style={[
                      styles.messageBubble,
                      message.isUser ? styles.userBubble : styles.botBubble,
                    ]}>
                      <Text style={[
                        styles.messageText,
                        message.isUser ? styles.userText : styles.botText,
                      ]}>
                        {message.text}
                      </Text>
                    </View>
                    <Text style={[
                      styles.timestamp,
                      message.isUser && { textAlign: 'right' }
                    ]}>
                      {message.timestamp.toLocaleTimeString('vi-VN', { 
                        hour: '2-digit', 
                        minute: '2-digit' 
                      })}
                    </Text>
                  </View>

                  {message.isUser && (
                    <View style={[styles.avatar, styles.userAvatar]}>
                      <User size={16} color="#FFFFFF" />
                    </View>
                  )}
                </Animated.View>
              ))}
            </ScrollView>

            {messages.length === 1 && (
              <Animated.View entering={FadeInDown.delay(200)} style={styles.quickActions}>
                <Text style={styles.quickActionsTitle}>C√¢u h·ªèi g·ª£i √Ω:</Text>
                <View style={styles.quickActionsRow}>
                  {quickActions.map((action, index) => (
                    <TouchableOpacity
                      key={index}
                      style={styles.quickAction}
                      onPress={action.action}
                    >
                      <Text style={styles.quickActionText}>{action.text}</Text>
                    </TouchableOpacity>
                  ))}
                </View>
              </Animated.View>
            )}

            <View style={styles.inputContainer}>
              <TextInput
                style={styles.textInput}
                value={inputText}
                onChangeText={setInputText}
                placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."
                placeholderTextColor={colors.textSecondary}
                multiline
                onSubmitEditing={sendMessage}
                blurOnSubmit={false}
              />
              <TouchableOpacity
                style={[
                  styles.sendButton,
                  !inputText.trim() && styles.sendButtonDisabled
                ]}
                onPress={sendMessage}
                disabled={!inputText.trim()}
              >
                <Send size={18} color="#FFFFFF" />
              </TouchableOpacity>
            </View>
          </View>
        </KeyboardAvoidingView>
      </Modal>
    </>
  );
}